# A script to automatically run existing julia files in which I write to solve more problems.
# This will automatically create the solutions.md file from a given file: Example for problem 8:
# Looks for problem008() defined in *current_directory*/008/008.jl

using Glob, Primes, Base, BenchmarkTools

function get_problem_directories()
    #globs current file's directory for three letter folders.
    files = glob("*", (@__FILE__)[1:end-13])
    delete = []
    for i in 1:length(files)
        length(files[i]) != length((@__FILE__)[1:end-13])+4 ? append!(delete, i) : nothing
    end
    for i in sort(delete, rev=true)
        deleteat!(files, i)
    end

    #Andrew's 3 character folders break this script. Remove them.
    N = length(files)
    for i in 1:length(files)
        #Going from backwards to forwards stops bounds errors when
        #deleteing elements.
        j = N-i+1
        if files[j][end-2] == 'Q'
            deleteat!(files,j)
        end
    end
    return files
end


function run_problems(dir_list)
    #runs problems. Example, taking path from 008 we append 008.jl and include and run
    #the function problem008() defined in 008.jl

    dir_list = get_problem_directories()
    answers = []
    times = []

    for i in 1:length(dir_list)
        dir_list[i] *= "/" * lpad(i,3,"0") * ".jl"
        include(dir_list[i])
        fn = "problem" * lpad(i,3,"0")
        append!(answers, Base.invokelatest(getfield(Main, Symbol(fn))))

        #round( (@belapsed inv(rand(3,3))), sigdigits=3)
        append!(times, round((@belapsed Base.invokelatest(getfield(Main, Symbol($fn)))), sigdigits=3))
    end
    [answers, times]
end

function write_to_file(answers)
    solutions = answers[1]
    times = answers[2]

    ## of numbers in longest solution
    longest_sol = maximum(length.(string.(solutions)))

    #delete existing file first
    rm((@__FILE__)[1:end-13] * "/README.md")
    for i in 1:length(solutions)
        open((@__FILE__)[1:end-13] * "/README.md","a") do io
            if i==1
                println(io, "# Project Euler")
                println(io, "#### Solutions to Project Euler written in C++ \n \n By Andrew Tuma `Q###/EulerQ###.cpp` and Harrison Hoffman `harry###.cpp`
                \n#### Solutions to Project Euler written in Julia \n \n By Chris DeGrendele ``###/###.jl`
                \nProblem #  | ", lpad("Solution",longest_sol, " "),"  |  Time")
                println(io, "---|---|---")
            end

            println(io,lpad(i,3,"0")* "        | ", lpad(solutions[i], longest_sol, " "), "  |  ",
            lpad(times[i], 8, " "), " seconds")


            if i==length(solutions)
                println(io, "\n \n \n *Todo: Add cpp/python file support to get harrison and andrew's code in here too*
                \n This markdown file was automatically generated by [solutions.jl](https://github.com/Andrew-Harrison-Chris/ProjectEuler/blob/master/solutions.jl)")
            end

        end
    end
end

write_to_file(run_problems(get_problem_directories()))
